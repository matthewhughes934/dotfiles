[alias]
    br = "branch"
    cb = "rev-parse --abbrev-ref HEAD" # current-branch
    co = "checkout"
    current-branch = "rev-parse --abbrev-ref HEAD"
    d = difftool
    head = "rev-parse HEAD"
    nb = "checkout -b" # new-branch
    st = "status"

    ## Non-trivial aliases
    # First merge that introduced SHA $1 into $2 (default master)
    fnd-merge = "!f() {\
        (\
            git rev-list --ancestry-path "$1".."${2:-$(git root-branch)}"; \
            git rev-list --first-parent "$1".."${2:-$(git root-branch)}" \
        ) \
        | awk '{if ($1 in seen || seen[$1]=1) {print($1)}}' \
        | tail --lines=1; \
    }; f"

    ### Diff viewers
    # 'diff-open', open difftool for changes from $1 (default master) and $2
    # (default HEAD)
    do-changes = "!f() {\
        git difftool --prompt --ignore-all-space \
        "${1:-$(git root-branch)}"..."${2:-HEAD}"; \
    }; f"
    # name files changed from $1 (default $(git root-branch)) and $2 (default HEAD)
    name-changes = "!f() {\
        git diff --name-only "$(git merge-base "${1:-$(git root-branch)}" "${2:-HEAD}")"; \
    }; f"
    # same as 'show-changes' but just show a one-line summary
    ol-changes = "!f() {\
        git log --reverse --oneline "${2:-HEAD}" "^${1:-$(git root-branch)}"; \
    }; f"
    l-changes = "!f() {\
        git log --reverse "${2:-HEAD}" "^${1:-$(git root-branch)}"; \
    }; f"
    # show commit + patch for each commit from $1 (default $(git root-branch)) and $2
    # (default HEAD)
    diff-changes = "!f() {\
        git log --reverse --no-merges --patch \
        "${2:-HEAD}" "^${1:-$(git root-branch)}"; \
    }; f"

    # delete any branches in HEAD
    trim = "!f() {\
        branches=$(git branch --merged | awk 'NF==1'); \
        [ -z \"$branches\" ] && echo 'No merged branches' 1>&2 \
            && return 1; \
        git branch --delete $branches; \
    }; f"

    # 'master' or 'main'?
    root-branch = "!f() {\
        git rev-parse --quiet --verify master >/dev/null \
        && echo 'master' \
        || echo 'main'; \
    }; f"

    # fixups
    select-commit = "!f() {\
        git ol-changes "$@" | text_select; \
    }; f"
    fixup = "!f() {\
        git commit --fixup="$(git select-commit $@)"; \
    }; f"
    fixupp = "!f() {\
        git commit --patch --fixup="$(git select-commit $@)"; \
    }; f"
    fixupa = "!f() {\
        git commit --all --fixup="$(git select-commit $@)"; \
    }; f"

    # squashing
    squash = "!f() {\
        git commit --squash="$(git select-commit $@)"; \
    }; f"
    squashp = "!f() {\
        git commit --patch --squash="$(git select-commit $@)"; \
    }; f"
    squasha = "!f() {\
        git commit --all --squash="$(git select-commit $@)"; \
    }; f"
    rebaseq = "!f() { GIT_SEQUENCE_EDITOR=: git rebase --interactive "$@"; }; f"
[color "status"]
    changed = yellow
[color "interactive"]
    prompt = cyan
[commit]
    verbose=true
[core]
    editor = vim
    excludesfile = ~/.config/git/ignore
    attributesFile = ~/.config/git/attributes
    pager = less --quit-if-one-screen --no-init
[diff]
    tool = vimdiff
    cmd = "-c 'set diffopt+=iwhite'"
[difftool]
    prompt = true
[merge]
    tool = vimdiff
[push]
    default = current
[rebase]
    autosquash = true
[user]
    name = "Matthew Hughes"
    email = matthewhughes934@gmail.com
[init]
	defaultBranch = main
