#!/usr/bin/env bash

set -o errexit -o pipefail -o nounset

# cleanup any branches that:
#
# 1) previously had a remote reference, and
# 2) the remote reference is no longer valid, and
# 3) have no commits that bring in changes that don't already exist in HEAD
#
# basically mean to cleanup any merged branches via
# `git pull --prune && git trim`
# (see also config.fetch.prune to save on the `--prune` bit)

REF_PREFIX="refs/heads/"

while read -r ref
do
    ref_type="$(cut --delimiter ' ' --field 1 <<< "$ref")"
    ref_name="$(cut --delimiter ' ' --field 2 <<< "$ref")"
    upstream="$(cut --delimiter ' ' --field 3 <<< "$ref")"

    # not sure this will never not be the case...
    if [ "$ref_type" != 'commit' ]
    then
        echo "unexpected ref type ($ref_type) for $ref_name" >&2
        continue
    fi

    # remote ref still exists, keep local branch
    if git rev-parse --quiet --verify "$upstream" >/dev/null
    then
        continue
    fi

    first_new_commit="$(
        git log \
            --max-count=1 \
            --format='%h' \
            --right-only \
            --cherry-pick \
            --no-merges \
            "...$ref_name" \
    )"

    # branch has at least one commit not in HEAD
    if [ -n "$first_new_commit" ]
    then
        continue
    fi

    git branch --delete --force "${ref_name#"$REF_PREFIX"}"

done < <(git for-each-ref --format='%(objecttype) %(refname) %(upstream:short)' refs/heads/)
